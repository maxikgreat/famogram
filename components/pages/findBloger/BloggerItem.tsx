import {Dispatch, memo, SetStateAction, VFC} from 'react';import {AccordionItem, AccordionItemButton, AccordionItemHeading, AccordionItemPanel} from 'react-accessible-accordion';import {isMobile} from 'react-device-detect';import {ContactInfoMetadata, InstagramMetadata, User} from '@/types';import {FontAwesomeIcon} from '@fortawesome/react-fontawesome';import {faBusinessTime, faLock, faLockOpen, faEnvelope, faInfoCircle, faMousePointer, faHandHoldingUsd } from '@fortawesome/free-solid-svg-icons';import {faFacebook, faWhatsapp} from '@fortawesome/free-brands-svg-icons';interface BloggerItemProps {	blogger: User,	index: number,	setShowDetails: Dispatch<SetStateAction<boolean>>}export const BloggerItem: VFC<BloggerItemProps> = memo(({ blogger, index, setShowDetails }) => {	const { user: instaUser, category, desc , price } = blogger.user_metadata?.instagram as InstagramMetadata;	const { contactEmail, messengers: { whatsApp, facebook }} = blogger.user_metadata?.contactInfo as ContactInfoMetadata;		const shortDescription = () => isMobile		? instaUser.biography.length > 50 ? `${instaUser.biography.substr(0,50)}...` : instaUser.biography		: instaUser.biography.length > 100 ? `${instaUser.biography.substr(0,125)}...` : instaUser.biography		return (		<div className="mb-4 mb-md-2" onClick={() => setShowDetails(true)}>			<div className="item-inner">				<div					className={`position-absolute badge badge-primary badge-${isMobile ? 'sm' : 'lg'}`}					style={{ right: 0, top: 0 }}				>					{category}				</div>				<div className="d-flex" style={{ height: isMobile ? 150 : 125 }}>					<div className="col-4 col-md-2 p-md-0" style={{ height: isMobile ? 150 : 125 }}>						<img src={instaUser.photoUrl} style={{ height: '100%', width: '100%', objectFit: 'cover' }} />					</div>					<div						className="col-8 col-md-10 d-flex flex-column justify-content-between align-items-around p-1 pl-2 item-content"						style={{ height: isMobile ? 150 : 125 }}					>						{							instaUser.fullName !== ''								? (									<span className="h5 mb-0">										<b className="mr-2">{instaUser.fullName}</b>										<small>											<a style={{textDecoration: 'underline'}} target="_blank" rel="noreferrer noopener" href={`https://instagram.com/${instaUser.username}`}>(@{instaUser.username})</a>										</small>									</span>								)								: (									<span className="h5 mb-0">										<a style={{textDecoration: 'underline'}} target="_blank" rel="noreferrer noopener" href={`https://instagram.com/${instaUser.username}`}>@{instaUser.username}</a>									</span>								)						}						<span>{shortDescription()}</span>						<div className="d-flex justify-content-between align-items-center">							<div className="followers">								<span><b className="text-primary">{instaUser.follow}</b> follow</span> |								<span><b className="text-primary"> {instaUser.followedBy}</b> followers</span>							</div>							<div className="d-md-block d-none">								{instaUser.isBusinessAccount && (									<div className="fabrx-chip">										<FontAwesomeIcon icon={faBusinessTime} />										<span>Business</span>									</div>								)}								{instaUser.isPrivate ? (									<div className="fabrx-chip ml-2">										<FontAwesomeIcon icon={faLock} />										<span>Private</span>									</div>								) : (									<div className="fabrx-chip ml-2">										<FontAwesomeIcon icon={faLockOpen} />										<span>Public</span>									</div>								)}							</div>						</div>					</div>				</div>			</div>		</div>	)});