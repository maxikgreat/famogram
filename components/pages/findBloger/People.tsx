import {useState, VFC} from 'react';import Skeleton, {SkeletonTheme} from 'react-loading-skeleton';import {Accordion} from 'react-accessible-accordion';import {FontAwesomeIcon} from '@fortawesome/react-fontawesome';import {faHeartBroken, faExclamationCircle} from '@fortawesome/free-solid-svg-icons';import {Input} from '@/components/common';import {faSearch} from '@fortawesome/free-solid-svg-icons';import {categories, User} from '@/types';import {BloggerItem} from '@pagesComponents/findBloger/BloggerItem';interface PeopleProps {	bloggers: User[] | null,	error: string,	loading: boolean,}export const People: VFC<PeopleProps> = ({ loading, error, bloggers }) => {	const [searchBlogger, setSearchBlogger] = useState('');	const renderSkeletons = () => categories.map((cat) => (			<Skeleton				key={cat}				duration={Math.random() * (1.1 - 1) + 1}				width={Math.floor(Math.random() * (175 - 75 + 1) + 75)}				height={50}				className="mb-2 mr-2"			/>		)	);		const renderBloggers = () => {		if (!bloggers) return;		const bloggersToRender =  bloggers			.filter(({ user_metadata }) => user_metadata?.instagram?.user.username.toLowerCase().includes(searchBlogger.toLowerCase()))			.map((filteredBlogger, index) => (				<BloggerItem					key={filteredBlogger.updated_at}					blogger={filteredBlogger}					index={index}				/>			))		if (bloggersToRender.length === 0) {			return (				<>					<span className="h6">No bloggers found</span>					<FontAwesomeIcon icon={faHeartBroken} color="#d1506a" className="ml-2" />				</>			)		}		return bloggersToRender;	}		return (		<div className="col-lg-8">			<div className="d-flex flex-row align-items-center justify-content-between">				<h3 className="d-inline-block mr-lg-5">Bloggers</h3>			</div>			<Input				name="blogger"				icon={faSearch}				placeholder="Find account"				onChange={({ target: { value }}) => setSearchBlogger(value)}				value={searchBlogger}			/>			<div className="tab-content text-left mt-4 mt-md-5 mt-lg-0 scroll-list pt-3 pt-md-0">				<div className="tab-pane active show">					{loading && (							<SkeletonTheme color="#202020" highlightColor="#444">								{renderSkeletons()}							</SkeletonTheme>						)					}					{error && (						<>							<span className="h6">{error}</span>							<FontAwesomeIcon icon={faExclamationCircle} color="#d1506a" className="ml-2" />						</>					)}					{bloggers && (						<Accordion allowZeroExpanded>							{renderBloggers()}						</Accordion>					)}				</div>			</div>		</div>	)}{/*<ul className="nav nav-tabs nav-tabs-no-bg nav-tabs-rounded nav-tabs-md p-0 mb-2 bg-transparent justify-content-end">*/}{/*	<li className="nav-item">*/}{/*		<a className="nav-link active" data-toggle="tab" href="#Active">Active</a>*/}{/*	</li>*/}{/*	<li className="nav-item">*/}{/*		<a className="nav-link" data-toggle="tab" href="#Inactive1">Inactive</a>*/}{/*	</li>*/}{/*	<li className="nav-item">*/}{/*		<a className="nav-link" data-toggle="tab" href="#Inactive2">Inactive</a>*/}{/*	</li>*/}{/*	<li className="nav-item">*/}{/*		<a className="nav-link" data-toggle="tab" href="#Inactive3">Inactive</a>*/}{/*	</li>*/}{/*</ul>*/}