import {Dispatch, SetStateAction, useState, VFC} from 'react';import Skeleton from 'react-loading-skeleton';import {FontAwesomeIcon} from '@fortawesome/react-fontawesome';import {faHeartBroken, faExclamationCircle} from '@fortawesome/free-solid-svg-icons';import moment from 'moment';import {Input} from '@/components/common';import {faSearch} from '@fortawesome/free-solid-svg-icons';import {categories, ExtendedUser} from '@/types';import {BloggerItem, Sort} from '@pagesComponents/findBloger';export interface SortMethodState {	type: 'new' | 'followers',	reverse: boolean}interface PeopleProps {	bloggers: ExtendedUser[] | undefined | null,	error: string,	loading: boolean,	setActiveBlogger: Dispatch<SetStateAction<ExtendedUser | null>>}export const People: VFC<PeopleProps> = ({ loading, error, bloggers, setActiveBlogger }) => {	const [searchBlogger, setSearchBlogger] = useState('');	const [sortMethod, setSortMethod] = useState<SortMethodState>({		type: 'new',		reverse: false	});		const renderSkeletons = () => categories.map((cat) => (			<Skeleton				key={cat}				duration={Math.random() * (1.1 - 1) + 1}				width={Math.floor(Math.random() * (175 - 75 + 1) + 75)}				height={50}				className="mb-2 mr-2"			/>		)	);		const renderBloggers = () => {		if (!bloggers) return;		const bloggersToRender = bloggers			.filter(({ user_metadata }) => user_metadata?.instagram?.user.username.toLowerCase().includes(searchBlogger.toLowerCase()))			.sort((a, b) => {				const userFollowersA = a.user_metadata?.instagram?.user.followedBy as number;				const userFollowersB = b.user_metadata?.instagram?.user.followedBy as number;				if (sortMethod.type === 'followers') {					return userFollowersA - userFollowersB;				}				return moment(a.created_at).diff(b.created_at);			})			.map((filteredBlogger) => (				<BloggerItem					key={filteredBlogger.updated_at}					blogger={filteredBlogger}					setActiveBlogger={setActiveBlogger}				/>			))		if (bloggersToRender.length === 0) {			return (				<>					<span className="h6">No bloggers found</span>					<FontAwesomeIcon icon={faHeartBroken} color="#d1506a" className="ml-2" />				</>			)		}		return sortMethod.reverse ? bloggersToRender.reverse() : bloggersToRender;	}		return (		<div className="col-lg-8">			<div className="d-flex flex-row align-items-center justify-content-between">				<h3 className="d-inline-block mr-lg-5">Bloggers</h3>			</div>			<div className="d-flex flex-column flex-md-row params">				<div className="input-hld">					<Input						name="blogger"						icon={faSearch}						placeholder="Find account"						onChange={({ target: { value }}) => setSearchBlogger(value)}						value={searchBlogger}					/>				</div>				<Sort					sortMethod={sortMethod}					setSortMethod={setSortMethod}				/>			</div>						<div className="tab-content text-left mt-4 mt-md-5 mt-lg-0 scroll-list pt-3 pt-md-0">				<div className="tab-pane active show">					{loading && renderSkeletons()}					{error && (						<>							<span className="h6">{error}</span>							<FontAwesomeIcon icon={faExclamationCircle} color="#d1506a" className="ml-2" />						</>					)}					{!error && bloggers && renderBloggers()}				</div>			</div>		</div>	)}