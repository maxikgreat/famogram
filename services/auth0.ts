import {NextPageContext} from 'next';import {IncomingMessage, ServerResponse} from 'http';import {RequestContext, ResponseContext} from 'express-openid-connect';import {renameKeys} from '@/helpers';import {query} from 'express';interface Auth0Context extends NextPageContext {	req: IncomingMessage & { oidc: RequestContext },	res: ServerResponse & { oidc: ResponseContext }}type ExtendedNextPageContext = NextPageContext & Auth0Context;export function withAuth(	callback?: (...args: any) => any,) {	return async ({ req, query }: ExtendedNextPageContext) => {		try {			// @ts-ignore			let { isExpired, access_token, refresh, token_type } = req.oidc.accessToken;			if (isExpired() || query.refresh) {				({ access_token } = await refresh());			}						const user = await req.oidc.fetchUserInfo();						if (!access_token || !user) {				return {					redirect: {						destination: '/login',						permanent: false					}				}			}						return {				props: {					user: renameKeys(user),					token: `${token_type} ${access_token}`,				}			}		} catch (err) {			console.log("INTERNAL ERROR", err);			return {				redirect: {					destination: '/',					permanent: false				}			}		}	}}