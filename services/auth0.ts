import {NextPageContext} from 'next';import {IncomingMessage, ServerResponse} from 'http';import {AccessToken, RequestContext, ResponseContext} from 'express-openid-connect';import {ParsedUrlQuery} from 'querystring';import {renameKeys} from '@/helpers';interface Auth0Context extends NextPageContext {	req: IncomingMessage & { oidc: RequestContext },	res: ServerResponse & { oidc: ResponseContext },	query: ParsedUrlQuery & { refresh: boolean | undefined }}type ExtendedNextPageContext = NextPageContext & Auth0Context;export function withAuth(	callback?: (...args: any) => any,) {	return async ({ req, query: { refresh = false } }: ExtendedNextPageContext) => {		try {			let { isExpired, access_token, refresh: refreshToken, token_type } = req.oidc.accessToken as AccessToken;			if (isExpired() || refresh) {				({ access_token } = await refreshToken());			}						const	user = await req.oidc.fetchUserInfo();						if (!access_token || !user) {				return {					redirect: {						destination: '/login',						permanent: false					}				}			}						return {				props: {					user: renameKeys(user),					token: `${token_type} ${access_token}`,				}			}		} catch (err) {			console.log(err);			return {				redirect: {					destination: '/?error=err.error',					permanent: false				}			}		}	}}